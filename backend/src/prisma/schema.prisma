datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


generator client {
  provider        = "prisma-client-js"
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String  @map("user_id") @db.ObjectId
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.String
  access_token       String? @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.String
  session_state      String?
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  username      String?   
  accounts      Account[]
  sessions      Session[]
  favorites Favorite[]
  role    Role     @default(USER)
  @@map("users")
}

model VerificationToken {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Products {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  imgs String[]
  name String
  price String
  sizes String[]
  colors  Color[]
  description String
  favorite   Favorite?

  @@map("productss")
}
model Favorite {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String @map("user_id") @db.ObjectId 
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId    String     @map("product_id") @db.ObjectId @unique
  product      Products  @relation(fields: [productId], references: [id])
  count Int @default(0)
  @@map("favorite")
  @@index([userId, productId], name: "user_product_unique")
}

type Color{
  alt String?
  img String?
  url String?
}
enum Role {
  USER
  ADMIN
}